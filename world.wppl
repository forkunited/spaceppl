var discretePointWorldUniformPrior = function(length, height, pointRefs) {
	return function() {
		var points = map(function(pointRef) { return [randomInteger(length), randomInteger(height)] }, pointRefs);
		return _.object(pointRefs, points);
	}
}

var DiscretePointWorldUniformPrior = function(length, height, pointRefs) {
	var prior = discretePointWorldUniformPrior(length, height, pointRefs);
	return Infer({ method : 'enumerate' }, function() {
		return prior();
	})
}

var discretePointWorldUniformPriorNoReplacementInit = function(length, height, pointRefs, ordered) {
	return function() {
		var subset = ordered ?
			sort(randomSubset(length*height, pointRefs.length))
			: randomSubset(length*height, pointRefs.length)
		var points = map(function(pointIndex) { return [Math.floor(pointIndex/length), pointIndex % length] }, subset);
		return _.object(pointRefs, points);
	}
}

var DiscretePointWorldUniformPriorNoReplacement = function(length, height, pointRefs, ordered) {
	var prior = discretePointWorldUniformPriorNoReplacementInit(length, height, pointRefs, ordered);
	return Infer({ method : 'enumerate' }, function() {
		return prior();
	})
}

var discretePointWorldUniformPriorNoReplacement = function(length, height, pointRefs, ordered) {
	var dist = DiscretePointWorldUniformPriorNoReplacement(length, height, pointRefs, ordered);
	return function() {
		return sample(dist);
	}
}

var randomSubset = function(n, k) {
	var perm = shuffle(n);
	return _.initial(perm, n-k);
}

var shuffle = function(n) {
	var perm = _.range(n);	
	return shuffleHelper(n-1, perm);
}

var shuffleHelper = function(i, perm) {
	if (i == 0)
		return perm
	else {
		var temp = perm[i];
		var swap = randomInteger(i+1);
		return shuffleHelper(i - 1, mapIndexed(function(index, element) { 
							return index == i ? perm[swap] : 
								(index == swap ? temp : 
									perm[index]) 
							}, perm))
	}
}

var summarizeWorldByPair = function(world, fn) {
	var kvPairs = _.pairs(world);
	return _.object(filter(function(v) { return v != undefined }, 
		_.flatten(
			map(function(pair1) { map(function(pair2) {
				if (pair1[0] != pair2[0]) {
					return fn(pair1, pair2);
				} else {
					return undefined;
				} 
			}, kvPairs) }, kvPairs),
		true)));
}

var summarizePointWorldByDistance = function(world) {
	return summarizeWorldByPair(world,
                function(p1,p2) {
                        var pStr = (p1[0] < p2[0]) ? p1[0] + "_" + p2[0] : p2[0] + "_" + p1[0];
                        return [pStr, spaceppl.space.distanceL2(p1[1],p2[1])]
                }
        );
}

var pointToDistanceWorldDistribution = function(Dist) {
	return Infer({ method : 'enumerate' }, function() {
		return summarizePointWorldByDistance(sample(Dist));
	});
}
