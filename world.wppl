/*
 * Grid priors... unused lately
 */

var discretePointWorldUniformGridPrior = function(length, height, pointRefs) {
	return function() {
		var points = map(function(pointRef) { return [randomInteger(length), randomInteger(height)] }, pointRefs);
		return _.object(pointRefs, points);
	}
}

var DiscretePointWorldUniformGridPrior = function(length, height, pointRefs) {
	var prior = discretePointWorldUniformGridPrior(length, height, pointRefs);
	return Infer({ method : 'enumerate' }, function() {
		return prior();
	})
}

var discretePointWorldUniformGridPriorNoReplacementInit = function(length, height, pointRefs, ordered) {
	return function() {
		var subset = ordered ?
			sort(randomIndexSubset(length*height, pointRefs.length))
			: randomIndexSubset(length*height, pointRefs.length)
		var points = map(function(pointIndex) { return [Math.floor(pointIndex/length), pointIndex % length] }, subset);
		return _.object(pointRefs, points);
	}
}

var DiscretePointWorldUniformGridPriorNoReplacement = function(length, height, pointRefs, ordered) {
	var prior = discretePointWorldUniformGridPriorNoReplacementInit(length, height, pointRefs, ordered);
	return Infer({ method : 'enumerate' }, function() {
		return prior();
	})
}

var discretePointWorldUniformGridPriorNoReplacement = function(length, height, pointRefs, ordered) {
	var dist = DiscretePointWorldUniformGridPriorNoReplacement(length, height, pointRefs, ordered);
	return function() {
		return sample(dist);
	}
}

/* 
 * Point world uniform prior places points in a square
 */

var makePossibleLocations = function(length, height, possibleLocationCount) {
	return mapN(function(i) { return [uniform(0,length), uniform(0, height)] }, possibleLocationCount);
}

var discretePointWorldUniformPriorInit = function(length, height, possibleLocationCount, pointRefs, ordered) {
	var possibleLocations = makePossibleLocations(length, height, possibleLocationCount);
	return discreteWorldUniformPriorInitFromLocations(possibleLocations, pointRefs, ordered);
}

var discretePointWorldUniformPriorInitFromLocations = function(possibleLocations, pointRefs, ordered) {
	return function() {
		var points = randomSubset(possibleLocations, pointRefs.length, ordered);
		return _.object(pointRefs, points);
	}
}

var DiscretePointWorldUniformPrior = function(length, height, possibleLocationCount, pointRefs, ordered) { 
	var prior = discretePointWorldUniformPriorInit(length, height, possibleLocationCount, pointRefs, ordered);
	return Infer({ method : 'enumerate' }, function() {
		return prior();
	});
}

var discretePointWorldUniformPrior = function(length, height, possibleLocationCount, pointRefs, ordered) {
	var dist = DiscretePointWorldUniformPrior(length, height, possibleLocationCount, pointRefs, ordered);
	return function() { 
		return sample(dist);
	}
}

/*
 * Collection of point world uniform priors used for training models
 */


/*
 * Repeat k times:
 * 	Sample possible locations
 *	Check if possible location already in location map
 * 		If not, then map location to prior over possible locations
 */

var discretePointWorldUniformPriorCollectionInit = function(length, height, possibleLocationCount, pointRefs, ordered, k) {	
	var helperF = function(k, priors, supports) {
		if (k == 0) {
			var ParameterizedPrior = function(parameter) {
				if (parameter === undefined) {
					var Prior = priors[supports[0][0].toString()];
					return Prior;
				} else { 
					var Prior = priors[parameter.toString()];
					return Prior;
				}
			}

			var parameterizedPrior = function(parameter) {
				if (parameter === undefined) {
					var Prior = priors[supports[0][0].toString()];
					return sample(Prior);
				} else { 
					var Prior = priors[parameter.toString()];
					return sample(Prior);
				}
			};

			return { parameterizedPrior : parameterizedPrior, ParameterizedPrior : ParameterizedPrior,  parameterClasses : supports };
		}

		var locations = makePossibleLocations(length, height, possibleLocationCount);

		// Check if priors collection already contains the possible locations
		if (any(function(loc) { priors[loc] != undefined  }, locations)) {
			return helperF(k, priors, supports); // Sample different locations if it already has these
		} else {
			// Construct prior from possible locations and put it in the map
			var prior = discretePointWorldUniformPriorInitFromLocations(locations, pointRefs, ordered);
			var Prior = Infer({ method : 'enumerate' }, function() { return prior() });
			// Put the prior in the map
			var locPriors = _.object(map(function(l) { return [l.toString(), Prior] }, locations));
			var newPriors = _.extend(priors, locPriors);
			var newSupports = _.union(supports, [locations]); 
			// Construct the rest of the k-1 priors
			return helperF(k-1, newPriors, newSupports);
		}
	}

	return helperF(k, {}, []);
}
 
/* Slow version */
/*var discretePointWorldUniformPriorCollectionInit = function(length, height, possibleLocationCount, pointRefs, ordered, k) {	
	var helperF = function(k, priorsF, supports) {
		if (k == 0) {
			var parameterizedPrior = function(parameter) {
				var Prior = priorsF(parameter);
				return sample(Prior);	
			};

			return { parameterizedPrior : parameterizedPrior, ParameterizedPrior : priorsF,  parameterClasses : supports };
		}

		var locations = makePossibleLocations(length, height, possibleLocationCount);

		// Check if priors collection already contains the possible locations
		if (any(function(loc) { priorsF(loc) != undefined  }, locations)) {
			return helperF(k, priorsF, supports); // Sample different locations if it already has these
		} else {
			// Construct prior from possible locations and put it in the map
			var prior = discretePointWorldUniformPriorInitFromLocations(locations, pointRefs, ordered);
			var Prior = Infer({ method : 'enumerate' }, function() { return prior() });
			// Put the prior in the map
			var newPriorsF = function(loc) {
				if (loc === undefined || any(function(l) { return _.isEqual(l, loc) }, locations)) {
					return Prior
				} else {
					return priorsF(loc);
				}
			}

			var newSupports = _.union(supports, [locations]); 
			// Construct the rest of the k-1 priors
			return helperF(k-1, newPriorsF, newSupports);
		}
	}

	return helperF(k, function(loc) { return undefined }, []);
}*/

var getCanonicalParameters = function(parameterClasses) {
	return map(function(parameterClass) { return parameterClass[0] }, parameterClasses);
}

var transformParameterizedPrior = function(fn, ParameterizedPrior, parameters) {
	var Priors = map(function(parameter) { return [parameter, fn(ParameterizedPrior(parameter))] }, parameters);

	return function(parameter) {
		var paramAndPrior = filter(function(P) { return _.isEqual(P[0], parameter) }, Priors);
		return paramAndPrior[0][1];
	}
}


/*
 * World transformation functions
 */

var transformWorld = function(world, fn) {
	var kvPairs = _.pairs(world);
	return _.object(
			filter(function(v) { return v != undefined }, 
				map(fn, kvPairs)
			)
		);
}

var translateWorld = function(world, xTrans, yTrans) {
	return transformWorld(world, function(refPointPair) {
		return [refPointPair[0], spaceppl.space.translatePoint(refPointPair[1], xTrans, yTrans)]
	});
}

var scaleWorld = function(world, xScale, yScale) {
	return transformWorld(world, function(refPointPair) {
		return [refPointPair[0], spaceppl.space.scalePoint(refPointPair[1], xScale, yScale)]
	});
}

var rotateWorld = function(world, theta) {
	return transformWorld(world, function(refPointPair) {
		return [refPointPair[0], spaceppl.space.rotatePoint(refPointPair[1], theta)]
	});
}

var summarizeWorldByPair = function(world, fn) {
	var kvPairs = _.pairs(world);
	return _.object(filter(function(v) { return v != undefined }, 
		_.flatten(
			map(function(pair1) { map(function(pair2) {
				if (pair1[0] != pair2[0]) {
					return fn(pair1, pair2);
				} else {
					return undefined;
				} 
			}, kvPairs) }, kvPairs),
		true)));
}

var summarizePointWorldByDistance = function(world, filterPoint, round) {
	return summarizeWorldByPair(world,
                function(p1,p2) {
			if (filterPoint && p1[0] != filterPoint && p2[0] != filterPoint) {
				return undefined;
			} else {
				var pStr = (p1[0] < p2[0]) ? p1[0] + "_" + p2[0] : p2[0] + "_" + p1[0];
				var d = spaceppl.space.distanceL2(p1[1],p2[1]);
				return [pStr, spaceppl.util.round(d, round)];
			}
		}
        );
}

var pointToDistanceWorldDistribution = function(Dist, filterPoint, round) {
	return Infer({ method : 'enumerate' }, function() {
		return summarizePointWorldByDistance(sample(Dist), filterPoint, round);
	});
}

var transformWorldDistribution = function(Dist, fn) {
	return Infer({ method : 'enumerate' }, function() {
		return transformWorld(sample(Dist), fn);
	});
}

var translateWorldDistribution = function(Dist, xTrans, yTrans) {
	return Infer({ method : 'enumerate' }, function() {
		return translateWorld(sample(Dist), xTrans, yTrans);
	});
}

var scaleWorldDistribution = function(Dist, xScale, yScale) {
	return Infer({ method : 'enumerate' }, function() {
		return scaleWorld(sample(Dist), xScale, yScale);
	});
}

var rotateWorldDistribution = function(Dist, theta) {
	return Infer({ method : 'enumerate' }, function() {
		return rotateWorld(sample(Dist), theta);
	});
}

