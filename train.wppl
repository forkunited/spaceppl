var trainingSamplesPerUtterance = 100;
var trainingIterations = 3000;
var trainingGradientSamples = 1;
var pointRefs = ["p1","p2","p3", "p4", "p5", "p6"];
var gridWidth = 3;
var gridHeight = 3;
var pointRefMentions = map(function(p) { return "'" + p + "'" }, pointRefs);

var worldPrior = discretePointWorldUniformPriorNoReplacement(gridWidth,gridHeight, pointRefs, true);
//discretePointWorldUniformPrior(gridWidth,gridHeight,pointRefs);

var utterances = spaceppl.semantics.makeUtterances([["spaceppl.space.near"], [_.first(pointRefMentions)], _.rest(pointRefMentions)]);
var utterancePrior = function() { return uniformDraw(utterances) }; 

var trueParametersPrior = function() { 
	return { worldPrior : worldPrior,
		 utterancePrior : utterancePrior,
		 parametersPrior : function() {
		 	return {
				nearThreshold : uniformDraw([1,1.2]),  
		 		nearVagueness : .05, 
		 		nearFn : spaceppl.space.nearPoints
			}
		} 
	} 
};

var networkParametersPrior = function() { 
	var nearPointsNetworkParameters = nnGaussianParameterPrior(2,4); // Hidden size, input size (input is 4 for two 2d points)

	return { worldPrior : worldPrior, 
		 utterancePrior : utterancePrior,
		 parametersPrior : function() {
			return {
				nearThreshold : uniformDraw([1,1.2]), 
				nearVagueness : .05, 
				nearFn : spaceppl.space.nearPointsNetwork,
				nearPointsNetworkParameters : nearPointsNetworkParameters 
			}
		}
	}
};

var groundTruthListener = makeRSA(trueParametersPrior());

display("Making data...");
var trainData = makeData(groundTruthListener, utterances, trainingSamplesPerUtterance);

display("Training model...");
var trainingResults = train(makeTrainingObj(makeRSA, networkParametersPrior, trainData), trainingIterations, trainingGradientSamples);


var trainedListener = sample(SampleGuide(makeTrainingObj(makeRSA, networkParametersPrior), { params: trainingResults }));


display("World prior")
display(Infer({method : 'enumerate'}, worldPrior));
display("Training utterances");
display(utterances);
display("Ground truth distribution near(p1,p2");
display(groundTruthListener("spaceppl.space.near('p1','p2')"));
display("Learned distribution near(p1,p2)");
display(trainedListener("spaceppl.space.near('p1','p2')"));
