var makeSpatialRSA = function(rsaDist, rsaLevel, alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters) {
	var localWorldPrior = function(parameters) { return worldPrior(parameters.local); };	

	return makeRSA({ worldPrior : localWorldPrior,
                         utterancePrior : utterancePrior,
                         parametersPrior : function(local, dist, level) {
                                return {
                                        alpha : alpha,
					                    nearThreshold : (level != 0) ? nearThresholdPrior() : 1,
                                        nearVagueness : nearVagueness,
                                        nearFn : (nearPointsNetworkParameters) ? spaceppl.space.nearPointsNetwork : spaceppl.space.nearPoints,
									    nearPointsNetworkParameters : nearPointsNetworkParameters,
                                	    local : local
				                }
                        }
                }, rsaDist, rsaLevel);
}

var trainSpatialRSA = function(
				rsaDist,
				rsaLevel,
				alpha,
				worldPrior,
				utterancePrior,
				nearThresholdPrior,
				nearVagueness,
				iterations,
				samplesPerInput,
				gradientSamples,
				nearPointsNetworkParametersPrior,
				worldParameters) {
	
	var groundTruthDist = makeSpatialRSA(rsaDist, rsaLevel, alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
	var localWorldPrior = function(parameters) { return worldPrior(parameters.local); };

	var networkParametersPrior = function() { 
		var nearPointsNetworkParameters = nearPointsNetworkParametersPrior(); 
		return { worldPrior : localWorldPrior, 
			 utterancePrior : utterancePrior,
			 fixedParameters : {
				alpha : alpha, 
				nearVagueness : nearVagueness,
				nearFn : spaceppl.space.nearPointsNetwork,
				nearPointsNetworkParameters : nearPointsNetworkParameters
			 },
		 	 parametersPrior : function(local, dist, level) {
			 	return {
					alpha : alpha, 
					nearThreshold : (level != 0) ? nearThresholdPrior() : 1,
					nearVagueness : nearVagueness, 
					nearFn : spaceppl.space.nearPointsNetwork,
					nearPointsNetworkParameters : nearPointsNetworkParameters,
					local : local
				}
			}
		}
	};

	var utterances = constructSupport(utterancePrior);
    var worldsAndParams = constructSupport(worldPrior, worldParameters);
	var worlds = worldsAndParams[0];
	var paramsByWorld = worldsAndParams[1];

	display("Spatial RSA making training data...");
	var trainData = rsaDist == RSA_S ?
		makeData(groundTruthDist, samplesPerInput, worlds, paramsByWorld, false)
		: makeData(groundTruthDist, samplesPerInput, utterances, worldParameters, true);
	display("Spatial RSA training model...");

	var makeRSADist = makeRSAFactory(rsaDist, rsaLevel);
	return train(makeTrainingObj(makeRSADist, networkParametersPrior), trainData, iterations, gradientSamples);
}
