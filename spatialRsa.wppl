var makeSpatialRSA = function(alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters) {
	var localWorldPrior = function(parameters) { return worldPrior(parameters.local); };	

	return makeRSA({ worldPrior : localWorldPrior,
                         utterancePrior : utterancePrior,
                         parametersPrior : function(local) {
                                return {
                                        alpha : alpha,
					nearThreshold : nearThresholdPrior(),
                                        nearVagueness : nearVagueness,
                                        nearFn : (nearPointsNetworkParameters) ? spaceppl.space.nearPointsNetwork : spaceppl.space.nearPoints,
					nearPointsNetworkParameters : nearPointsNetworkParameters,
                                	local : local
				}
                        }
                });
}

var trainSpatialRSA = function(alpha,
				worldPrior,
				utterancePrior,
				nearThresholdPrior,
				nearVagueness,
				iterations,
				samplesPerUtterance,
				gradientSamples,
				nearPointsNetworkParametersPrior,
				worldParameters) {
	
	var groundTruthListener = makeSpatialRSA(alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
	var localWorldPrior = function(parameters) { return worldPrior(parameters.local); };

	var networkParametersPrior = function() { 
		var nearPointsNetworkParameters = nearPointsNetworkParametersPrior(); 
		return { worldPrior : localWorldPrior, 
			 utterancePrior : utterancePrior,
			 fixedParameters : {
				alpha : alpha, 
				nearVagueness : nearVagueness,
				nearFn : spaceppl.space.nearPointsNetwork,
				nearPointsNetworkParameters : nearPointsNetworkParameters
			 },
		 	 parametersPrior : function(local) {
			 	return {
					alpha : alpha, 
					nearThreshold : nearThresholdPrior(), 
					nearVagueness : nearVagueness, 
					nearFn : spaceppl.space.nearPointsNetwork,
					nearPointsNetworkParameters : nearPointsNetworkParameters,
					local : local
				}
			}
		}
	};

	var utterances = (Infer({method : 'enumerate'}, utterancePrior)).support();

	display("Spatial RSA making training data...");
	var trainData = makeData(groundTruthListener, samplesPerUtterance, utterances, worldParameters);
	display("Spatial RSA training model...");
	return train(makeTrainingObj(makeRSA, networkParametersPrior), trainData, iterations, gradientSamples);
}
