var applyFn = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("applyFn error: Requires at least 1 but no more than 4 arguments")
        return undefined;
    }

    if (args.length == 1) {
        return fn(args[0]);
    } else if (args.length == 2) {
        return fn(args[0], args[1]);
    } else if (args.length == 3) {
        return fn(args[0], args[1], args[2]);
    } else if (args.length == 4) {
        return fn(args[0], args[1], args[2], args[3]);
    }
}

var mapTupleArgs = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("mapTupleArgs error: At least 1 but no more than 4 lists of arguments should be given")
        return undefined;
    }

    return mapN(function(i) {
        var args = mapN(function(j) { return args[j][i] }, args.length);
        return applyFn(fn, args);
    }, args[0].length);
}

var mapTuple = function(fn) {
    if (arguments.length <= 1 || arguments.length >=5) {
        display("mapTuple error: At least 1 but no more than 4 lists of arguments should be given")
        return undefined;
    }

    var args = _.rest(arguments, 1);
    return mapTupleArgs(fn, args);
}

var _listProduct = function(args) {
    var listProductPair = function(l1, l2) {
        return _.flatten(map(function (item1) {
            return map(function (item2) {
                return _.flatten([[item1], item2], true);
            }, l2);
        }, l1),true);
    }

    return reduce(function(l, acc) { return listProductPair(l, acc) }, [[]], args)
}

var listProduct = function() {
    return _listProduct(arguments);
}

var mapProductArgs = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("mapProductArgs error: At least 1 but no more than 4 lists of arguments should be given")
        return undefined;
    }

    var tuples = _listProduct(args);

    return map(function(tuple) {
        return applyFn(fn, tuple);
    }, tuples);
}

var mapProduct = function(fn) {
    if (arguments.length <= 1 || arguments.length >=5) {
        display("mapProduct error: At least 1 but no more than 4 lists of arguments should be given")
        return undefined;
    }

    var arguments0 = arguments;
    var args = mapN(function(i) { return arguments0[i+1] }, arguments0.length - 1);
    return mapProductArgs(fn, args);
    /*return _.flatten(
     map(function(item1) {
     return map(function(item2) {
     return fn(item1, item2);
     }, arr2);
     }, arr1), false);*/
}

var constructSupport = function(dist, parameters) {
	if (parameters != undefined) {
        return _.unzip(_.flatten(map(function(param) {
            return (Infer({method : 'enumerate'},
                    function () {
                        return [dist(param), param];
                    })
            ).support()
        }, parameters), true));
	} else {
        return (Infer({method: 'enumerate'}, dist)).support();
    }
}

var parseArgs = function() {
	var args = process.argv;
	var keyValues = mapN(function(index) {
		if (index != args.length - 1 && args[index].startsWith("--")) {
			return [args[index].substring(2,args[index].length), args[index + 1]];
		} else {
			return undefined
		} 
	}, args.length);

	var keyValuesFiltered = filter(function(keyValue) {
		return keyValue != undefined;
	}, keyValues);

	return spaceppl.util.makeObject(keyValuesFiltered);
}

/*
 * Random subset helper function
 */

var randomSubset = function(l, k, ordered) {
    var subset = ordered ? sort(randomIndexSubset(l.length, k)) : randomIndexSubset(l.length, k);
    var points = map(function(index) { return l[index] }, subset);
    return points;
}

var randomIndexSubset = function(n, k) {
    var randomIndexSubsetHelper = function(subset, possible) {
        var nextIndex = randomInteger(possible.length);
        var nextVal = possible[nextIndex];
        var nextPossible = _.without(possible, nextVal);
        var nextSubset = _.union(subset, [nextVal]);


        if (nextSubset.length == k) {
            return nextSubset;
        } else {
            return randomIndexSubsetHelper(nextSubset, nextPossible);
        }
    };

    return randomIndexSubsetHelper([], _.range(n));
}

/*
 * Old slow version of random subset that relies on shuffling
 */

var randomIndexSubsetShuffle = function(n, k) {
    var perm = shuffleIndex(n);
    return _.initial(perm, n-k);
}

var shuffleIndex = function(n) {
    var perm = _.range(n);
    return shuffleIndexHelper(n-1, perm);
}

var shuffleIndexHelper = function(i, perm) {
    if (i == 0)
        return perm
    else {
        var temp = perm[i];
        var swap = randomInteger(i+1);
        return shuffleIndexHelper(i - 1, mapIndexed(function(index, element) {
            return index == i ? perm[swap] :
                (index == swap ? temp :
                    perm[index])
        }, perm))
    }
}

/* String stuff */

var strProduct = function(strList1, strList2, midStr, endStr) {
    return _.flatten(map(function(str1) {
        return map(function(str2) {
            return str1 + midStr + str2 + endStr
        }, strList2)
    }, strList1));
}
