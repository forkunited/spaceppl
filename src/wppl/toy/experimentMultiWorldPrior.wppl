var alpha = 100;
var trainingSamplesPerUtteranceWorld = 20;  // Want 1000 per utterance (then give 200 here if 5 world priors)
var trainingIterations = 1;
var trainingGradientSamples = 5;
var pointRefs = ["p1","p2","p3"]; //, "p4", "p5", "p6"];
var worldWidth = 3;
var worldHeight = 3;
var possiblePositionCount = 3; //6; (120 possible worlds)
var worldPriorCount = 40; //5;

display("Making world priors...");
var worldPriorsCollection = discretePointWorldUniformPriorCollectionInit(worldWidth, worldHeight, possiblePositionCount, pointRefs, false, worldPriorCount); 
var worldPrior = worldPriorsCollection.parameterizedPrior;
var worldPriorParameters = getCanonicalParameters(worldPriorsCollection.parameterClasses);

var WorldPrior = worldPriorsCollection.ParameterizedPrior;
var TranslatedWorldPrior = transformParameterizedPrior(function(Prior) { return translateWorldDistribution(Prior,10,10) }, WorldPrior, worldPriorParameters);
var ScaledWorldPrior = transformParameterizedPrior(function(Prior) { return scaleWorldDistribution(Prior,10,10) }, WorldPrior, worldPriorParameters);
var RotatedWorldPrior = transformParameterizedPrior(function(Prior) { return rotateWorldDistribution(Prior,3.14/3) }, WorldPrior, worldPriorParameters);

var translatedWorldPrior = function(param) { return sample(TranslatedWorldPrior(param)) };
var scaledWorldPrior = function(param) { return sample(ScaledWorldPrior(param)) };
var rotatedWorldPrior = function(param) { return sample(RotatedWorldPrior(param)) };

//var WorldPrior = mapProduct(function(utterance, worldParameter) { return Infer({method:'enumerate'}, worldPrior);
//var TranslatedWorldPrior = translateWorldDistribution(WorldPrior, 10,10);
//var ScaledWorldPrior = scaleWorldDistribution(WorldPrior,10,10);
//var RotatedWorldPrior = rotateWorldDistribution(WorldPrior, 3.14/3);

//var translatedWorldPrior = function() { return sample(TranslatedWorldPrior) };
//var scaledWorldPrior = function() { return sample(ScaledWorldPrior) }; 
//var rotatedWorldPrior = function() { return sample(RotatedWorldPrior) };

display("Making utterance prior...");
var utterancePrior = nearFirstRestUtteranceUniformPrior(pointRefs);
var utterances = (Infer({method : 'enumerate'}, utterancePrior)).support(); 

var nearThresholdPrior = function () { uniformDraw([1,10]) };
var nearVagueness = .05;

// Hidden size, input size (input is 4 for two 2d points)
var nearPointsNetworkParametersPrior = function() { return nnGaussianParameterPrior(2,4); }

var trueListener = makeSpatialRSA(alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var translatedListener = makeSpatialRSA(alpha, translatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var scaledListener = makeSpatialRSA(alpha, scaledWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var rotatedListener = makeSpatialRSA(alpha, rotatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);

var trainingResults = trainSpatialRSA(alpha,
				worldPrior,
				utterancePrior,
				nearThresholdPrior,
				nearVagueness,
				trainingIterations,
				trainingSamplesPerUtteranceWorld,
				trainingGradientSamples,
				nearPointsNetworkParametersPrior,
				worldPriorParameters);

var trainedListener = trainingResults[0];

var nearPointsNetworkParameters = trainingResults[1].fixedParameters.nearPointsNetworkParameters;
var translatedTrainedListener = makeSpatialRSA(alpha, translatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);
var scaledTrainedListener = makeSpatialRSA(alpha, scaledWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);
var rotatedTrainedListener = makeSpatialRSA(alpha, rotatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);

var displayDist = function(name, Dist) { display(name); display(spaceppl.util.distToArray(pointToDistanceWorldDistribution(Dist, 'p1', 3),3)) };

display("Utterances");
display(utterances);
displayDist("World Prior", WorldPrior());
//displayDist("World Prior (translated)", TranslatedWorldPrior);
//displayDist("World Prior (scaled)", ScaledWorldPrior);
//displayDist("World Prior (rotated)", RotatedWorldPrior);

var testUtterance = "spaceppl.space.near('p1','p2')";

displayDist("Ground truth distribution near(p1,p2)", trueListener(testUtterance, worldPriorParameters[0]));
displayDist("Learned distribution near(p1,p2)", trainedListener(testUtterance, worldPriorParameters[0]));

displayDist("Ground truth translated distribution near(p1,p2)", translatedListener(testUtterance, worldPriorParameters[0]));
displayDist("Learned translated distribution near(p1,p2)", translatedTrainedListener(testUtterance, worldPriorParameters[0]));

displayDist("Ground truth scaled distribution near(p1,p2)", scaledListener(testUtterance, worldPriorParameters[0]));
displayDist("Learned scaled distribution near(p1,p2)", scaledTrainedListener(testUtterance, worldPriorParameters[0]));

displayDist("Ground truth rotated distribution near(p1,p2)", rotatedListener(testUtterance, worldPriorParameters[0]));
displayDist("Learned rotated distribution near(p1,p2)", rotatedTrainedListener(testUtterance, worldPriorParameters[0]));

var computeMeanKL = function(trueL, trainedL) {
	return listMean(
		mapProduct(function(utterance, worldParameter) {
			return spaceppl.util.KL(trueL(utterance,worldParameter), trainedL(utterance,worldParameter));  
		}, utterances, worldPriorParameters)
	);
}

display("near(p1,p2) Mean KL");
display(computeMeanKL(trueListener, trainedListener));

display("near(p1,p2) Translated Mean KL");
display(computeMeanKL(translatedListener, translatedTrainedListener));

display("near(p1,p2) Scaled Mean KL");
display(computeMeanKL(scaledListener, scaledTrainedListener));

display("near(p1,p2) Rotated Mean KL");
display(computeMeanKL(rotatedListener, rotatedTrainedListener));


