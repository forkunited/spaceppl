var RSA_L = "L";
var RSA_S = "S";
var RSA_All = "All";

var makeRSA = function(params, dist, level) {
	var cacheSize = 10000;

	var memApply = cache(function(utterance, world, parameters) {
			return spaceppl.semantics.apply(utterance, world, parameters);	
		}, cacheSize);

	var utterancePrior = params.constant.utterancePrior;
	var worldPrior = params.constant.worldPrior;
	var parametersPrior = params.parametersPrior;

	var inferParams = { method : 'enumerate' };

    /* This is a hackish way to implement L0, S0, L1, S1, etc.
     * It doesn't seem possible to do more cleanly because
     * webppl doesn't support caching recursive or mutually
     * recursive functions?
     */

    var _L0 = cache(function(utterance, observation, parameters) {
        return Infer(inferParams, function() {
            var parameters = (parameters) ? parameters : parametersPrior(observation, RSA_L, 0);
            var world = worldPrior(observation,parameters);
            var truthValue = memApply(utterance, world, parameters);
            factor(Math.log(truthValue));
            return world;
        });
    }, cacheSize);

    var _S0 = cache(function (world, observation, parameters) {
        return Infer(inferParams, function () {
            var utterance = utterancePrior(observation, parameters);
            var L_up = _L0(utterance, observation, parameters);
            factor(parameters.alpha * L_up.score(world));
            return utterance;
        })
    }, cacheSize);

    var _L1 = cache(function(utterance, observation, parameters) {
        return Infer(inferParams, function() {
            var parameters = (parameters) ? parameters : parametersPrior(observation, RSA_L, 1);
            var world = worldPrior(observation, parameters);
            var S_wp = _S0(world, observation, parameters);
            factor(S_wp.score(utterance));
            return world;
        });
    }, cacheSize);

    var _S1 = cache(function (world, observation, parameters) {
        return Infer(inferParams, function () {
            var utterance = utterancePrior(observation, parameters);
            var L_up = _L1(utterance, observation, parameters);
            factor(parameters.alpha * L_up.score(world));
            return utterance;
        })
    }, cacheSize);

    var _L2 = cache(function(utterance, observation, parameters) {
        return Infer(inferParams, function() {
            var parameters = (parameters) ? parameters : parametersPrior(observation, RSA_L, 2);
            var world = worldPrior(observation, parameters);
            var S_wp = _S1(world, observation, parameters);
            factor(S_wp.score(utterance));
            return world;
        });
    }, cacheSize);

    var _S2 = cache(function (world, observation, parameters) {
        return Infer(inferParams, function () {
            var utterance = utterancePrior(observation, parameters);
            var L_up = _L2(utterance, observation, parameters);
            factor(parameters.alpha * L_up.score(world));
            return utterance;
        })
    }, cacheSize);

    var _L3 = cache(function(utterance, observation, parameters) {
        return Infer(inferParams, function() {
            var parameters = (parameters) ? parameters : parametersPrior(observation, RSA_L, 3);
            var world = worldPrior(observation, parameters);
            var S_wp = _S2(world, observation, parameters);
            factor(S_wp.score(utterance));
            return world;
        });
    }, cacheSize);

    var _S3 = cache(function (world, observation, parameters) {
        return Infer(inferParams, function () {
            var utterance = utterancePrior(observation, parameters);
            var L_up = _L3(utterance, observation, parameters);
            factor(parameters.alpha * L_up.score(world));
            return utterance;
        })
    }, cacheSize);

    var _dists = [
        { L : _L0, S : _S0},
        { L : _L1, S : _S1},
        { L : _L2, S : _S2},
        { L : _L3, S : _S3},
    ];

    var dists = mapN(
        function(l) {
            var S = cache(function(world, observation) {
                return Infer(inferParams, function() {
                    var parameters = parametersPrior(observation, RSA_S, l);
                    var utterance = utterancePrior(observation, parameters);
                    var _L = _dists[l].L;
                    // Note: listener does not receive speaker's parameters
                    // Top-level listener always chooses the interpretation
                    // of the utterance (by sampling parameters)
                    var L_up = _L(utterance, observation);

                    factor(parameters.alpha*L_up.score(world));
                    return utterance;
                })
            }, cacheSize);

            if (l == 0) {
                var L = cache(function (utterance, observation) {
                    return Infer(inferParams, function () {
                        var parameters = parametersPrior(observation, RSA_L, l);
                        var world = worldPrior(observation, parameters);
                        var truthValue = memApply(utterance, world, parameters);
                        factor(Math.log(truthValue));
                        return world;
                    })
                }, cacheSize);

                return {"l" : l, "L" : L, "S" : S};
            } else {
                var L = cache(function (utterance, observation) {
                    return Infer(inferParams, function () {
                        var parameters = parametersPrior(observation, RSA_L, l);
                        var world = worldPrior(observation, parameters);
                        var _S = _dists[l-1].S;
                        var S_wp = _S(world, observation, parameters);
                        factor(S_wp.score(utterance));
                        return world;
                    })
                }, cacheSize);

                return {"l" : l, "L" : L, "S" : S};
            }
        },
        level+1);

    if (dist === RSA_L) {
        return dists[level].L
    } else if (dist === RSA_S) {
        return dists[level].S;
    } else {
        return dists;
    }
}

var makeRSAFactory = function(dist, level) {
	return function(params) {
		return makeRSA(params, dist, level);
	}
}
