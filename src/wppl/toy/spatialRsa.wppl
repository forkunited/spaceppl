var makeSpatialRSA = function(rsaDist, rsaLevel, parameters) {
    var constantParameters = _.clone(parameters);

	return makeRSA(
		{
			constant : constantParameters,
			parametersPrior : function(observation, dist, level) {
                var parameters = _.clone(constantParameters);
                var nearThresholdPrior = parameters.nearThresholdPrior;
                parameters.nearThreshold = nearThresholdPrior();
                parameters.observation = observation;

                if (parameters.nearPointsNetworkParameters)
                	parameters.nearFn = spaceppl.space.nearPointsNetwork;
                else
                	parameters.nearFn = spaceppl.space.nearPoints;

                return parameters;
			}
		},
		rsaDist, rsaLevel);
}

var trainSpatialRSA = function(rsaDist, rsaLevel, parameters, trainingParameters) {
	var groundTruthDist = makeSpatialRSA(rsaDist, rsaLevel, parameters);

	var networkParametersPrior = function() {
		var constantParameters = _.clone(parameters);
        var nearPointsNetworkParametersPrior = constantParameters.nearPointsNetworkParametersPrior;
		var nearPointsNetworkParameters = nearPointsNetworkParametersPrior();

		constantParameters.nearPointsNetworkParameters = nearPointsNetworkParameters;
        constantParameters.nearFn = spaceppl.space.nearPointsNetwork;

		return {
			 constant : constantParameters,
		 	 parametersPrior : function(observation, dist, level) {
				var parameters = _.clone(constantParameters);
				var nearThresholdPrior = parameters.nearThresholdPrior;
				parameters.nearThreshold = nearThresholdPrior();
				parameters.observation = observation;
				return parameters;
			}
		}
	};

	var utterances = constructSupport(parameters.utterancePrior);
    var worldsAndObs = constructSupport(parameters.worldPrior, trainingParameters.observations);
	var worlds = worldsAndObs[0];
	var obsByWorld = worldsAndObs[1];

	display("Spatial RSA making training data...");
	var trainData = rsaDist == RSA_S ?
		makeDataInputTuple(groundTruthDist, trainingParameters.samplesPerInput, worlds, obsByWorld)
		: makeDataInputProduct(groundTruthDist, trainingParameters.samplesPerInput, utterances, trainingParameters.observations);
	display("Spatial RSA training model...");

	var makeRSADist = makeRSAFactory(rsaDist, rsaLevel);
	return train(makeTrainingObj(makeRSADist, parameters.networkParametersPrior, trainingParameters.batchSize),
		trainData, trainingParameters.iterations, trainingParameters.gradientSamples);
}
