//var refs = ["p1", "p2", "p3"];
//var refMentions = map(strToMention, refs);
//display(makeUtterances([["spaceppl.space.near"], [_.first(refMentions)], _.rest(refMentions)]));
//display(randomSubset(refMentions, 2, true));
//display(makeUtterances([["spaceppl.space.near"], [2, true, refMentions]]));

//var args = parseArgs();
//display(args["out"]);

//var f = function() {
//    display(arguments[0] + " " + arguments[1]);
//}
//f("hi", "bye");

/* Put this back "learn.wppl", "world.wppl", "utterance.wppl", "rsa.wppl", "spatialRsa.wppl", "util.wppl", "experiment.wppl"*/

//spaceppl.rgame.getGameUtteranceActionPairs(spaceppl.rgame.readGame("output/4791-d"), spaceppl.rgame.senders.SPEAKER);

//spaceppl.feature.initFeatureUtteranceTokenAnnotation();

/*
var c = spaceppl.counter.init();
spaceppl.counter.increment(c, "hi");
spaceppl.counter.increment(c, "hi");
spaceppl.counter.increment(c, "hi");
spaceppl.counter.increment(c, "hi");
spaceppl.counter.increment(c, "bye");
spaceppl.counter.increment(c, "bye");
spaceppl.counter.increment(c, "by");
spaceppl.counter.increment(c, "t");

spaceppl.counter.removeLessThan(c, 2);
spaceppl.counter.increment(c, "new");
spaceppl.counter.increment(c, "dog");
spaceppl.counter.increment(c, "dog");
spaceppl.counter.increment(c, "dog");
spaceppl.counter.increment(c, "dog");

spaceppl.counter.increment(c, "zog");
spaceppl.counter.increment(c, "zog");
spaceppl.counter.increment(c, "zog");
spaceppl.counter.increment(c, "zog");

display(spaceppl.counter.getSortedCounts(c));
display(spaceppl.counter.getTop(c, 4));
display(spaceppl.counter.buildIndex(c));

var bi = spaceppl.bilookup.init(spaceppl.counter.buildIndex(c));
spaceppl.bilookup.save(bi, "output/testbi");
var lbi = spaceppl.bilookup.load("output/testbi"); //"output/testbi");
display(bi);
display("l");
display(lbi);
*/

var utteranceFn = spaceppl.rgame.getPairedUtterancesFn(spaceppl.rgame.senders.SPEAKER);
var actionFn = spaceppl.rgame.getPairedActionsFn(spaceppl.rgame.senders.SPEAKER)

var featureTypes = [
    {
        name : "utok",
        type : spaceppl.feature.types.UTTERANCE_TOKEN_ANNOTATION,
        parameters : { annotation : spaceppl.rgame.annotations.TOKEN, minCount : 5 }
    },
    {
        name : "blue",
        type : spaceppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "blue" }
    }
];

var vector = [/*"utok",*/ "blue"];
var f = spaceppl.feature.initFeatureSet("test", "output/games", utteranceFn, actionFn, featureTypes, vector);
spaceppl.feature.saveFeatureSet(f, "output/features/");
var fLoad = spaceppl.feature.loadFeatureSet("output/features/");

//display(fLoad.features.utok.vocabulary);

var F = spaceppl.feature.computeFeatureSet(fLoad, "output/games", spaceppl.rgame.getGameUtteranceActionPairs);

display(F);