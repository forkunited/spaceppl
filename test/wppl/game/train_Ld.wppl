// Run with:
// webppl test/wppl/game/train_Ld.wppl --require gameppl --require webppl-nn --require . --random-seed 1 --iterations 100

var args = parseArgs();
var iterations = args["iterations"]*1;
var batchSize = 100;
var gradientSamples = 1;

var inputF = gameppl.feature.loadFeatureMatrix("examples/features/mat/Ld_in");
var outputF = gameppl.feature.loadFeatureMatrix("examples/features/mat/Ld_out");

var D = makeDataFromFeatureMatrices(inputF, outputF, { inputSequence : true, outputSequence : false });

var D_split = splitDataOnKey(D, 0.9, "game");
var D_train = D_split[0];
var D_test = D_split[1];

var parameterPrior = function() {
    return {
        latentDimension: gameppl.feature.getFeatureMatrixVocabularySize(inputF),
        outputDimension : gameppl.feature.getFeatureMatrixVocabularySize(outputF),
        decoderType : DECODER_LINEAR,
    }
};

var makeModel = function(params) {
    var m = makeSequenceInputModel(params);
    return function(input) {
        return MultivariateGaussian({mu: m(input), cov : Matrix([[1.0,0.0],[0.0,1.0]])});
    }
};

var obj = makeTrainingObj(makeModel, parameterPrior,
    {   inputSequence: true,
        outputSequence: false,
        batchSize: batchSize,
        modelObserves : false
    });

var results = train(obj, D_train, iterations, gradientSamples);

var trainedModel = results[0];

var Y_hat_train = map(function(d) { return trainedModel(d.input).params.mu }, D_train);
var Y_train = map(function(d) { return d.output; }, D_train);
var Y_hat_test = map(function(d) { return trainedModel(d.input).params.mu }, D_test);
var Y_test = map(function(d) { return d.output; }, D_test);

var trainMSE = gameppl.evaluation.sampleMSE(Y_hat_train, Y_train);
var testMSE = gameppl.evaluation.sampleMSE(Y_hat_test, Y_test);
var trainLL = evaluationModelLL(trainedModel, D_train);
var testLL = evaluationModelLL(trainedModel, D_test);

display("iterations\ttrainMSE\ttestMSE\ttrainLL\ttestLL");
display(iterations + "\t" + trainMSE + "\t" + testMSE +"\t" + trainLL + "\t" + testLL);
