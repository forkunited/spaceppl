
// webppl test/wppl/old/test-game.wppl --require webppl-nn --require gameppl --require . --gamesDir output/games/1 --iterations 10 --random-seed 2

var args = parseArgs();
var gamesDir = args["gamesDir"];

var utteranceFn = gameppl.rgame.getPairedUtterancesFn(gameppl.rgame.senders.SPEAKER);
var actionFn = gameppl.rgame.getPairedActionsFn(gameppl.rgame.senders.SPEAKER)

var inputFeatureTypes = [
    {
        name : "utok", type : gameppl.feature.types.UTTERANCE_TOKEN_ANNOTATION_ENUMERABLE,
        parameters : { annotation : gameppl.rgame.annotations.TOKEN, minCount : 5 }
    },
    {
        name : "boxX", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "boxY" }
    },
    {
        name : "boxY", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "boxY" }
    },
    {
        name : "boxW", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "boxW" }
    },
    {
        name : "boxH", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "boxH" }
    },
    {
        name : "boxC", type : gameppl.feature.types.ACTION_DIMENSION_ENUMERABLE,
        parameters : { prefix : "boxC" }
    }
];

var inputVector = ["utok", "boxX", "boxY", "boxW", "boxH", "boxC"];
var inputf = gameppl.feature.initFeatureSet("testInput", gamesDir, utteranceFn, actionFn, inputFeatureTypes, inputVector);
//spaceppl.feature.saveFeatureSet(f, "output/features/");
//var fLoad = spaceppl.feature.loadFeatureSet("output/features/");
//display(fLoad.features.utok.vocabulary);
var inputF = gameppl.feature.computeFeatureSet(inputf, gamesDir, gameppl.rgame.getGameUtteranceActionPairs);

var outputFeatureTypes = [
    {
        name : "mouse", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "mouse" }
    }
];

var outputVector = ["mouse"];
var outputf = gameppl.feature.initFeatureSet("testOutput", gamesDir, utteranceFn, actionFn, outputFeatureTypes, outputVector);
var outputF = gameppl.feature.computeFeatureSet(outputf, gamesDir, gameppl.rgame.getGameUtteranceActionPairs);

var D = makeDataFromFeatureMatrices(inputF, outputF, { inputSequence : true, outputSequence : false });

var D_split = splitDataOnKey(D, 0.9, "game");
var D_train = D_split[0];
var D_test = D_split[1];

var parameterPrior = function() {
    return {
        latentDimension: gameppl.feature.getFeatureSetSize(inputf),
        outputDimension : gameppl.feature.getFeatureSetSize(outputf),
        decoderType : DECODER_LINEAR,
    }
};

var batchSize = 100;
var iterations = args["iterations"]*1;
var gradientSamples = 1;

// Data [{ input, output}]

var makeModel = function(params) {
    var m = makeSequenceInputModel(params);
    return function(input) {
        //return Categorical({ ps : [1.0], vs : [m(input)] });
        return MultivariateGaussian({mu: m(input), cov : Matrix([[1.0,0.0],[0.0,1.0]])});
    }
};

var obj = makeTrainingObj(makeModel, parameterPrior, { inputSequence: true, outputSequence: false, batchSize: batchSize, modelObserves : false });
var results = train(obj, D_train, iterations, gradientSamples);

var trainedModel = results[0];

var Y_hat_train = map(function(d) { return trainedModel(d.input).params.mu }, D_train);
var Y_train = map(function(d) { return d.output; }, D_train);
var Y_hat_test = map(function(d) { return trainedModel(d.input).params.mu }, D_test);
var Y_test = map(function(d) { return d.output; }, D_test);

var trainMSE = gameppl.evaluation.sampleMSE(Y_hat_train, Y_train);
var testMSE = gameppl.evaluation.sampleMSE(Y_hat_test, Y_test);

display("iterations\ttrainMSE\ttestMSE");
display(iterations + "\t" + trainMSE + "\t" + testMSE);