var alpha = 100;
var trainingSamplesPerUtterance = 1000;
var trainingIterations = 100;
var trainingGradientSamples = 5;
var pointRefs = ["p1","p2","p3"]; //, "p4", "p5", "p6"];
var worldWidth = 3;
var worldHeight = 3;
var possiblePositionCount = 6;

display("Making world prior...");
var worldPrior = discretePointWorldUniformPrior(worldWidth, worldHeight, possiblePositionCount, pointRefs, false);

//discretePointWorldUniformGridPriorNoReplacement(gridWidth,gridHeight, pointRefs, true);

var WorldPrior = Infer({method:'enumerate'}, worldPrior);
var TranslatedWorldPrior = translateWorldDistribution(WorldPrior, 10,10);
var ScaledWorldPrior = scaleWorldDistribution(WorldPrior,10,10);
var RotatedWorldPrior = rotateWorldDistribution(WorldPrior, 3.14/3);

var translatedWorldPrior = function() { return sample(TranslatedWorldPrior) };
var scaledWorldPrior = function() { return sample(ScaledWorldPrior) }; 
var rotatedWorldPrior = function() { return sample(RotatedWorldPrior) };

display("Making utterance prior...");
var utterancePrior = nearFirstRestUtteranceUniformPrior(pointRefs);

var nearThresholdPrior = function () { uniformDraw([1]) };
var nearVagueness = .05;

// Hidden size, input size (input is 4 for two 2d points)
var nearPointsNetworkParametersPrior = function() { return nnGaussianParameterPrior(2,4); }

var trueListener = makeSpatialRSA(alpha, worldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var translatedListener = makeSpatialRSA(alpha, translatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var scaledListener = makeSpatialRSA(alpha, scaledWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);
var rotatedListener = makeSpatialRSA(alpha, rotatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness);

var trainingResults = trainSpatialRSA(alpha,
				worldPrior,
				utterancePrior,
				nearThresholdPrior,
				nearVagueness,
				trainingIterations,
				trainingSamplesPerUtterance,
				trainingGradientSamples,
				nearPointsNetworkParametersPrior);

var trainedListener = trainingResults[0];

var nearPointsNetworkParameters = trainingResults[1].fixedParameters.nearPointsNetworkParameters;
var translatedTrainedListener = makeSpatialRSA(alpha, translatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);
var scaledTrainedListener = makeSpatialRSA(alpha, scaledWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);
var rotatedTrainedListener = makeSpatialRSA(alpha, rotatedWorldPrior, utterancePrior, nearThresholdPrior, nearVagueness, nearPointsNetworkParameters);

var displayDist = function(name, Dist) { display(name); display(spaceppl.util.distToArray(pointToDistanceWorldDistribution(Dist, 'p1', 3),3)) };

displayDist("Utterance Prior", Infer({method:'enumerate'}, function() { return utterancePrior }));
displayDist("World Prior", WorldPrior);
displayDist("World Prior (translated)", TranslatedWorldPrior);
displayDist("World Prior (scaled)", ScaledWorldPrior);
displayDist("World Prior (rotated)", RotatedWorldPrior);

var testUtterance = "spaceppl.space.near('p1','p2')";

displayDist("Ground truth distribution near(p1,p2)", trueListener(testUtterance));
displayDist("Learned distribution near(p1,p2)", trainedListener(testUtterance));

displayDist("Ground truth translated distribution near(p1,p2)", translatedListener(testUtterance));
displayDist("Learned translated distribution near(p1,p2)", translatedTrainedListener(testUtterance));

displayDist("Ground truth scaled distribution near(p1,p2)", scaledListener(testUtterance));
displayDist("Learned scaled distribution near(p1,p2)", scaledTrainedListener(testUtterance));

displayDist("Ground truth rotated distribution near(p1,p2)", rotatedListener(testUtterance));
displayDist("Learned rotated distribution near(p1,p2)", rotatedTrainedListener(testUtterance));

display("near(p1,p2) KL");
display(spaceppl.util.KL(trueListener(testUtterance), trainedListener(testUtterance)));

display("near(p1,p2) translated KL");
display(spaceppl.util.KL(translatedListener(testUtterance), translatedTrainedListener(testUtterance)));

display("near(p1,p2) scaled KL");
display(spaceppl.util.KL(scaledListener(testUtterance), scaledTrainedListener(testUtterance)));

display("near(p1,p2) rotated KL");
display(spaceppl.util.KL(rotatedListener(testUtterance), rotatedTrainedListener(testUtterance)));


